{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BGCFlow Wrapper \u00b6 A snakemake wrapper and utility tools for BGCFlow . For more details, see documentation . Setup \u00b6 To install bgcflow_wrapper, run this command in your terminal: 1 2 3 4 5 6 # create a new virtual environment python -m venv env source env/bin/activate # install BGCFlow wrapper pip install git+https://github.com/matinnuhamunada/bgcflow_wrapper.git Features \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ bgcflow Usage: bgcflow [ OPTIONS ] COMMAND [ ARGS ] ... A snakemake wrapper and utility tools for BGCFlow ( https://github.com/NBChub/bgcflow ) Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: build Use DBT to build DuckDB database from BGCFlow results. clone Use git to clone BGCFlow to local directory. deploy [ EXPERIMENTAL ] Deploy BGCFlow locally using snakedeploy. get-result View a tree of a project results or get a copy using Rsync. init Create projects or initiate BGCFlow config. rules Get description of available rules from BGCFlow. run A snakemake CLI wrapper to run BGCFlow. serve Generate static HTML report for BGCFlow run ( s ) Credits \u00b6 This package was created with the ppw tool. For more information, please visit the project page .","title":"Home"},{"location":"#bgcflow-wrapper","text":"A snakemake wrapper and utility tools for BGCFlow . For more details, see documentation .","title":"BGCFlow Wrapper"},{"location":"#setup","text":"To install bgcflow_wrapper, run this command in your terminal: 1 2 3 4 5 6 # create a new virtual environment python -m venv env source env/bin/activate # install BGCFlow wrapper pip install git+https://github.com/matinnuhamunada/bgcflow_wrapper.git","title":"Setup"},{"location":"#features","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ bgcflow Usage: bgcflow [ OPTIONS ] COMMAND [ ARGS ] ... A snakemake wrapper and utility tools for BGCFlow ( https://github.com/NBChub/bgcflow ) Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: build Use DBT to build DuckDB database from BGCFlow results. clone Use git to clone BGCFlow to local directory. deploy [ EXPERIMENTAL ] Deploy BGCFlow locally using snakedeploy. get-result View a tree of a project results or get a copy using Rsync. init Create projects or initiate BGCFlow config. rules Get description of available rules from BGCFlow. run A snakemake CLI wrapper to run BGCFlow. serve Generate static HTML report for BGCFlow run ( s )","title":"Features"},{"location":"#credits","text":"This package was created with the ppw tool. For more information, please visit the project page .","title":"Credits"},{"location":"api/","text":"Top-level package for bgcflow_wrapper. bgcflow \u00b6 Main module. cli \u00b6 Console script for bgcflow. projects_util \u00b6 bgcflow_init ( bgcflow_dir , global_config ) \u00b6 Initiate a config from template Source code in bgcflow/projects_util.py def bgcflow_init ( bgcflow_dir , global_config ): \"\"\" Initiate a config from template \"\"\" # check if global config available if global_config . is_file (): # grab available projects print ( f \"Found config file at: { global_config } \" ) with open ( global_config , \"r\" ) as file : config_yaml = yaml . safe_load ( file ) project_names = [ p for p in config_yaml [ \"projects\" ]] list_of_projects = {} for p in project_names : if p [ \"name\" ] . endswith ( \".yaml\" ): pep = peppy . Project ( str ( bgcflow_dir / p [ \"name\" ]), sample_table_index = \"genome_id\" ) name = pep . name file_path = pep . config [ \"sample_table\" ] else : name = p [ \"name\" ] file_path = p [ \"samples\" ] list_of_projects [ name ] = file_path print ( \"Available projects:\" ) for p in list_of_projects . keys (): print ( f \" - { p } : { file_path } \" ) else : generate_global_config ( bgcflow_dir , global_config ) print ( \"Do a test run by: `bgcflow run -n`\" ) return generate_global_config ( bgcflow_dir , global_config ) \u00b6 Copy config.yaml from template to config directory Source code in bgcflow/projects_util.py def generate_global_config ( bgcflow_dir , global_config ): \"\"\" Copy config.yaml from template to config directory \"\"\" print ( f \"Generating config file from template at: { global_config } \" ) template_config = bgcflow_dir / \".examples/_config_example.yaml\" assert ( template_config . is_file () ), \"Cannot find template file. Are you using BGCFlow version >= 0.4.1?\" shutil . copy ( template_config , global_config ) return generate_project ( bgcflow_dir , project_name , pep_version = '2.1.0' , use_project_rules = False , samples_csv = False , prokka_db = False , gtdb_tax = False , description = False ) \u00b6 Generate a PEP project in BGCFlow config file: Source code in bgcflow/projects_util.py def generate_project ( bgcflow_dir , project_name , pep_version = \"2.1.0\" , use_project_rules = False , samples_csv = False , prokka_db = False , gtdb_tax = False , description = False , ): \"\"\" Generate a PEP project in BGCFlow config file: Params: - samples_csv \"\"\" if bgcflow_dir is PosixPath : pass else : bgcflow_dir = Path ( bgcflow_dir ) global_config = bgcflow_dir / \"config/config.yaml\" template_dict = { \"name\" : project_name , \"pep_version\" : pep_version , \"description\" : \"<TO DO: give a description to your project>\" , \"sample_table\" : \"samples.csv\" , \"prokka-db\" : \"OPTIONAL: relative path to your `prokka-db.csv`\" , \"gtdb-tax\" : \"OPTIONAL: relative path to your `gtdbtk.bac120.summary.tsv`\" , } if use_project_rules : with open ( bgcflow_dir / \"workflow/rules.yaml\" , \"r\" ) as file : available_rules = yaml . safeload ( file ) available_rules = { rule : \"FALSE\" for rule in available_rules . keys ()} template_dict [ \"rules\" ] = available_rules project_dir = bgcflow_dir / f \"config/ { project_name } \" project_dir . mkdir ( parents = True , exist_ok = True ) if type ( samples_csv ) == pd . core . frame . DataFrame : print ( \"Generating samples file from Pandas DataFrame\" ) assert samples_csv . index . name == \"genome_id\" assert ( samples_csv . columns == [ \"source\" , \"organism\" , \"genus\" , \"species\" , \"strain\" , \"closest_placement_reference\" , ] ) . all samples_csv . to_csv ( project_dir / \"samples.csv\" ) elif type ( samples_csv ) == str : print ( f \"Copying samples file from { samples_csv } \" ) samples_csv = Path ( samples_csv ) assert samples_csv . is_file () shutil . copy ( samples_csv , project_dir / \"samples.csv\" ) if type ( prokka_db ) == str : print ( f \"Copying custom annotation file from { prokka_db } \" ) prokka_db = Path ( prokka_db ) assert prokka_db . is_file () shutil . copy ( prokka_db , project_dir / \"prokka-db.csv\" ) template_dict [ \"prokka-db\" ] = \"prokka-db.csv\" if type ( gtdb_tax ) == str : print ( f \"Copying custom taxonomy from { gtdb_tax } \" ) gtdb_tax = Path ( gtdb_tax ) assert gtdb_tax . is_file () shutil . copy ( gtdb_tax , project_dir / \"gtdbtk.bac120.summary.tsv\" ) template_dict [ \"gtdb-tax\" ] = \"gtdbtk.bac120.summary.tsv\" if type ( description ) == str : print ( \"Writing project description...\" ) template_dict [ \"description\" ] = description print ( f \"Project config file generated in: { project_dir } \" ) with open ( project_dir / \"project_config.yaml\" , \"w\" ) as file : yaml . dump ( template_dict , file , sort_keys = False ) if not global_config . is_file (): bgcflow_init ( bgcflow_dir , global_config ) with open ( bgcflow_dir / \"config/config.yaml\" , \"r\" ) as file : print ( \"Updating global config.yaml\" ) main_config = yaml . safe_load ( file ) project_names = [ p [ \"name\" ] for p in main_config [ \"projects\" ]] assert ( project_name not in project_names ), f \"Project name: ' { project_name } ' already exists! \\n Use a different name or edit the files in: { project_dir } \" assert ( str ( project_dir / \"project_config.yaml\" ) not in project_names ), f \"Project name: ' { project_name } ' already exists! \\n Use a different name or edit the files in: { project_dir } \" main_config [ \"projects\" ] . append ( { \"name\" : str ( project_dir / \"project_config.yaml\" )} ) with open ( bgcflow_dir / \"config/config.yaml\" , \"w\" ) as file : yaml . dump ( main_config , file , sort_keys = False ) return","title":"Modules"},{"location":"api/#bgcflow.bgcflow","text":"Main module.","title":"bgcflow"},{"location":"api/#bgcflow.cli","text":"Console script for bgcflow.","title":"cli"},{"location":"api/#bgcflow.projects_util","text":"","title":"projects_util"},{"location":"api/#bgcflow.projects_util.bgcflow_init","text":"Initiate a config from template Source code in bgcflow/projects_util.py def bgcflow_init ( bgcflow_dir , global_config ): \"\"\" Initiate a config from template \"\"\" # check if global config available if global_config . is_file (): # grab available projects print ( f \"Found config file at: { global_config } \" ) with open ( global_config , \"r\" ) as file : config_yaml = yaml . safe_load ( file ) project_names = [ p for p in config_yaml [ \"projects\" ]] list_of_projects = {} for p in project_names : if p [ \"name\" ] . endswith ( \".yaml\" ): pep = peppy . Project ( str ( bgcflow_dir / p [ \"name\" ]), sample_table_index = \"genome_id\" ) name = pep . name file_path = pep . config [ \"sample_table\" ] else : name = p [ \"name\" ] file_path = p [ \"samples\" ] list_of_projects [ name ] = file_path print ( \"Available projects:\" ) for p in list_of_projects . keys (): print ( f \" - { p } : { file_path } \" ) else : generate_global_config ( bgcflow_dir , global_config ) print ( \"Do a test run by: `bgcflow run -n`\" ) return","title":"bgcflow_init()"},{"location":"api/#bgcflow.projects_util.generate_global_config","text":"Copy config.yaml from template to config directory Source code in bgcflow/projects_util.py def generate_global_config ( bgcflow_dir , global_config ): \"\"\" Copy config.yaml from template to config directory \"\"\" print ( f \"Generating config file from template at: { global_config } \" ) template_config = bgcflow_dir / \".examples/_config_example.yaml\" assert ( template_config . is_file () ), \"Cannot find template file. Are you using BGCFlow version >= 0.4.1?\" shutil . copy ( template_config , global_config ) return","title":"generate_global_config()"},{"location":"api/#bgcflow.projects_util.generate_project","text":"Generate a PEP project in BGCFlow config file: Source code in bgcflow/projects_util.py def generate_project ( bgcflow_dir , project_name , pep_version = \"2.1.0\" , use_project_rules = False , samples_csv = False , prokka_db = False , gtdb_tax = False , description = False , ): \"\"\" Generate a PEP project in BGCFlow config file: Params: - samples_csv \"\"\" if bgcflow_dir is PosixPath : pass else : bgcflow_dir = Path ( bgcflow_dir ) global_config = bgcflow_dir / \"config/config.yaml\" template_dict = { \"name\" : project_name , \"pep_version\" : pep_version , \"description\" : \"<TO DO: give a description to your project>\" , \"sample_table\" : \"samples.csv\" , \"prokka-db\" : \"OPTIONAL: relative path to your `prokka-db.csv`\" , \"gtdb-tax\" : \"OPTIONAL: relative path to your `gtdbtk.bac120.summary.tsv`\" , } if use_project_rules : with open ( bgcflow_dir / \"workflow/rules.yaml\" , \"r\" ) as file : available_rules = yaml . safeload ( file ) available_rules = { rule : \"FALSE\" for rule in available_rules . keys ()} template_dict [ \"rules\" ] = available_rules project_dir = bgcflow_dir / f \"config/ { project_name } \" project_dir . mkdir ( parents = True , exist_ok = True ) if type ( samples_csv ) == pd . core . frame . DataFrame : print ( \"Generating samples file from Pandas DataFrame\" ) assert samples_csv . index . name == \"genome_id\" assert ( samples_csv . columns == [ \"source\" , \"organism\" , \"genus\" , \"species\" , \"strain\" , \"closest_placement_reference\" , ] ) . all samples_csv . to_csv ( project_dir / \"samples.csv\" ) elif type ( samples_csv ) == str : print ( f \"Copying samples file from { samples_csv } \" ) samples_csv = Path ( samples_csv ) assert samples_csv . is_file () shutil . copy ( samples_csv , project_dir / \"samples.csv\" ) if type ( prokka_db ) == str : print ( f \"Copying custom annotation file from { prokka_db } \" ) prokka_db = Path ( prokka_db ) assert prokka_db . is_file () shutil . copy ( prokka_db , project_dir / \"prokka-db.csv\" ) template_dict [ \"prokka-db\" ] = \"prokka-db.csv\" if type ( gtdb_tax ) == str : print ( f \"Copying custom taxonomy from { gtdb_tax } \" ) gtdb_tax = Path ( gtdb_tax ) assert gtdb_tax . is_file () shutil . copy ( gtdb_tax , project_dir / \"gtdbtk.bac120.summary.tsv\" ) template_dict [ \"gtdb-tax\" ] = \"gtdbtk.bac120.summary.tsv\" if type ( description ) == str : print ( \"Writing project description...\" ) template_dict [ \"description\" ] = description print ( f \"Project config file generated in: { project_dir } \" ) with open ( project_dir / \"project_config.yaml\" , \"w\" ) as file : yaml . dump ( template_dict , file , sort_keys = False ) if not global_config . is_file (): bgcflow_init ( bgcflow_dir , global_config ) with open ( bgcflow_dir / \"config/config.yaml\" , \"r\" ) as file : print ( \"Updating global config.yaml\" ) main_config = yaml . safe_load ( file ) project_names = [ p [ \"name\" ] for p in main_config [ \"projects\" ]] assert ( project_name not in project_names ), f \"Project name: ' { project_name } ' already exists! \\n Use a different name or edit the files in: { project_dir } \" assert ( str ( project_dir / \"project_config.yaml\" ) not in project_names ), f \"Project name: ' { project_name } ' already exists! \\n Use a different name or edit the files in: { project_dir } \" main_config [ \"projects\" ] . append ( { \"name\" : str ( project_dir / \"project_config.yaml\" )} ) with open ( bgcflow_dir / \"config/config.yaml\" , \"w\" ) as file : yaml . dump ( main_config , file , sort_keys = False ) return","title":"generate_project()"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Matin Nuhamunada matinnu@biosustain.dtu.dk Omkar S. Mohite omkmoh@biosustain.dtu.dk Contributors \u00b6 None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Matin Nuhamunada matinnu@biosustain.dtu.dk Omkar S. Mohite omkmoh@biosustain.dtu.dk","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/matinnuhamunada/bgcflow_wrapper/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 bgcflow_wrapper could always use more documentation, whether as part of the official bgcflow_wrapper docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/matinnuhamunada/bgcflow_wrapper/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up bgcflow_wrapper for local development. Fork the bgcflow_wrapper repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/bgcflow_wrapper.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8 , 3.9 , 3.10 and for PyPy. Check https://github.com/matinnuhamunada/bgcflow_wrapper/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_bgcflow_wrapper ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/matinnuhamunada/bgcflow_wrapper/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"bgcflow_wrapper could always use more documentation, whether as part of the official bgcflow_wrapper docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/matinnuhamunada/bgcflow_wrapper/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up bgcflow_wrapper for local development. Fork the bgcflow_wrapper repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/bgcflow_wrapper.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8 , 3.9 , 3.10 and for PyPy. Check https://github.com/matinnuhamunada/bgcflow_wrapper/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_bgcflow_wrapper ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2022-11-17) \u00b6 0.2.0 (2022-11-18) \u00b6 First release on PyPI.","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2022-11-17","text":"","title":"0.1.0 (2022-11-17)"},{"location":"history/#020-2022-11-18","text":"First release on PyPI.","title":"0.2.0 (2022-11-18)"},{"location":"installation/","text":"Stable release \u00b6 bgcflow_wrapper does not have a stable release yet! To install bgcflow_wrapper, run this command in your terminal: 1 pip install git+https://github.com/matinnuhamunada/bgcflow_wrapper.git This is the preferred method to install bgcflow_wrapper, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for bgcflow_wrapper can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/matinnuhamunada/bgcflow_wrapper Or download the tarball : 1 curl -OJL https://github.com/matinnuhamunada/bgcflow_wrapper/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"Installation"},{"location":"installation/#stable-release","text":"bgcflow_wrapper does not have a stable release yet! To install bgcflow_wrapper, run this command in your terminal: 1 pip install git+https://github.com/matinnuhamunada/bgcflow_wrapper.git This is the preferred method to install bgcflow_wrapper, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for bgcflow_wrapper can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/matinnuhamunada/bgcflow_wrapper Or download the tarball : 1 curl -OJL https://github.com/matinnuhamunada/bgcflow_wrapper/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"From source"},{"location":"tutorial/","text":"A full tutorial can be found at NBCHub .","title":"Tutorial"},{"location":"usage/","text":"Using as a command line interface \u00b6 This is the main intention of BGCFlow wrapper usage. Overview \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ bgcflow Usage: bgcflow [ OPTIONS ] COMMAND [ ARGS ] ... A snakemake wrapper and utility tools for BGCFlow ( https://github.com/NBChub/bgcflow ) Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: build Use DBT to build DuckDB database from BGCFlow results. clone Use git to clone BGCFlow to local directory. deploy [ EXPERIMENTAL ] Deploy BGCFlow locally using snakedeploy. get-result View a tree of a project results or get a copy using Rsync. init Create projects or initiate BGCFlow config. rules Get description of available rules from BGCFlow. run A snakemake CLI wrapper to run BGCFlow. serve Generate static HTML report for BGCFlow run ( s ) Typical Usage \u00b6 The first step of using BGCFlow wrapper is to get a copy (or clone) of the main BGCFlow Snakemake workflow. 1 2 # get a clone of BGCFlow in your local machine bgcflow clone MY_BGCFLOW_PATH #change PATH accordingly Then, initiate a project config by: 1 2 # initiate an example config and projects from template bgcflow init --bgcflow_dir MY_BGCFLOW_PATH This will generate a file called config.yaml in the config/ folder inside the cloned BGCFlow directory Once the config files are set, we can do a snakemake dry-run: 1 2 # do a dry-run bgcflow run -n --bgcflow_dir MY_BGCFLOW_PATH While the workflow is running, the command automatically serve Panoptes-UI at localhost:5000 ` to monitor jobs. To find out all the rules that can be added in the configuration file, do: 1 2 # find out available rules bgcflow rules --bgcflow_dir MY_BGCFLOW_PATH To get more details about each individual rules, do: 1 2 # get description of a rule bgcflow rules --describe antismash --bgcflow_dir MY_BGCFLOW_PATH/ To find out how to cite each rules, do: 1 2 # get citation of a rule bgcflow rules --cite antismash --bgcflow_dir MY_BGCFLOW_PATH/ Using as a python library \u00b6 You can also generate new projects via python or Jupyter notebooks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from bgcflow.projects_util import generate_project import pandas as pd df_samples = pd . read_csv ( 'samples.csv' , index_col = 0 ) description = \"Project generated from notebook\" generate_project ( \"BGCFLOW_PATH\" , \"MY_PROJECT\" , use_project_rules = True , samples_csv = df_samples , prokka_db = \"prokka-db.csv\" , gtdb_tax = \"gtdbtk.bac120.summary.tsv\" , description = description )","title":"Usage"},{"location":"usage/#using-as-a-command-line-interface","text":"This is the main intention of BGCFlow wrapper usage.","title":"Using as a command line interface"},{"location":"usage/#overview","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ bgcflow Usage: bgcflow [ OPTIONS ] COMMAND [ ARGS ] ... A snakemake wrapper and utility tools for BGCFlow ( https://github.com/NBChub/bgcflow ) Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: build Use DBT to build DuckDB database from BGCFlow results. clone Use git to clone BGCFlow to local directory. deploy [ EXPERIMENTAL ] Deploy BGCFlow locally using snakedeploy. get-result View a tree of a project results or get a copy using Rsync. init Create projects or initiate BGCFlow config. rules Get description of available rules from BGCFlow. run A snakemake CLI wrapper to run BGCFlow. serve Generate static HTML report for BGCFlow run ( s )","title":"Overview"},{"location":"usage/#typical-usage","text":"The first step of using BGCFlow wrapper is to get a copy (or clone) of the main BGCFlow Snakemake workflow. 1 2 # get a clone of BGCFlow in your local machine bgcflow clone MY_BGCFLOW_PATH #change PATH accordingly Then, initiate a project config by: 1 2 # initiate an example config and projects from template bgcflow init --bgcflow_dir MY_BGCFLOW_PATH This will generate a file called config.yaml in the config/ folder inside the cloned BGCFlow directory Once the config files are set, we can do a snakemake dry-run: 1 2 # do a dry-run bgcflow run -n --bgcflow_dir MY_BGCFLOW_PATH While the workflow is running, the command automatically serve Panoptes-UI at localhost:5000 ` to monitor jobs. To find out all the rules that can be added in the configuration file, do: 1 2 # find out available rules bgcflow rules --bgcflow_dir MY_BGCFLOW_PATH To get more details about each individual rules, do: 1 2 # get description of a rule bgcflow rules --describe antismash --bgcflow_dir MY_BGCFLOW_PATH/ To find out how to cite each rules, do: 1 2 # get citation of a rule bgcflow rules --cite antismash --bgcflow_dir MY_BGCFLOW_PATH/","title":"Typical Usage"},{"location":"usage/#using-as-a-python-library","text":"You can also generate new projects via python or Jupyter notebooks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from bgcflow.projects_util import generate_project import pandas as pd df_samples = pd . read_csv ( 'samples.csv' , index_col = 0 ) description = \"Project generated from notebook\" generate_project ( \"BGCFLOW_PATH\" , \"MY_PROJECT\" , use_project_rules = True , samples_csv = df_samples , prokka_db = \"prokka-db.csv\" , gtdb_tax = \"gtdbtk.bac120.summary.tsv\" , description = description )","title":"Using as a python library"}]}